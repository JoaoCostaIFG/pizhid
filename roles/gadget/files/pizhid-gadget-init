#!/bin/bash
#
# enable USB functions
# currently: USB ethernet (ECM/CDC and RNDIS) && USB keyboard
#
# Based on a combination of: http://www.isticktoit.net/?p=1383
#   and: https://github.com/ev3dev/ev3-systemd/blob/ev3dev-jessie/scripts/ev3-usb.sh
#   and: https://jon.sprig.gs/blog/post/2243

set -e
# enter gadget directory
cd "/sys/kernel/config/usb_gadget/" || exit 1

# CONSTANTS #
usb_ver="0x0200"    # USB 2.0
dev_class="2"       # Communications device
vid="0x1d6b"        # Linux Foundation
pid="0x0104"        # Multifunction Composite Gadget
# Device version
# this should be incremented any time there are breaking changes
# to this script so that the host OS sees it as a new device and
# re-enumerates everything rather than relying on cached values
device="0x1000"     # v1.0.0
mfg="Joao Costa"    # author
prod="PizHid"       # the product name
# Read mac address from eeprom to use for serialserial
serial="$(grep Serial /proc/cpuinfo | sed 's/Serial\s*: 0000\(\w*\)/\1/')"
attr="0xC0" # Self powered
pwr="1" # 2mA
cfg1="CDC"
cfg2="RNDIS"
# add colons for MAC address format
mac="$(echo ${serial} | sed 's/\(\w\w\)/:\1/g' | cut -b 2-)"
# Change the first number for each MAC address - the second digit of 2 indicates
# that these are "locally assigned (b2=1), unicast (b1=0)" addresses. This is
# so that they don't conflict with any existing vendors. Care should be taken
# not to change these two bits.
dev_mac1="02$(echo ${mac} | cut -b 3-)"
host_mac1="12$(echo ${mac} | cut -b 3-)"
dev_mac2="22$(echo ${mac} | cut -b 3-)"
host_mac2="32$(echo ${mac} | cut -b 3-)"
ms_vendor_code="0xcd" # Microsoft
ms_qw_sign="MSFT100" # also Microsoft (if you couldn't tell)
ms_compat_id="RNDIS" # matches Windows RNDIS Drivers
ms_subcompat_id="5162001" # matches Windows RNDIS 6.0 Driver
hid_protocol="1"
hid_subclass="1"
hid_report_len="8"

# CREATE A NEW GADGET #
echo "Setting up gadget..."
mkdir "pizhid_gadget"
cd "pizhid_gadget" || exit 1

echo "${usb_ver}"   >"bcdUSB"
echo "${dev_class}" >"bDeviceClass"
echo "${vid}"       >"idVendor"
echo "${pid}"       >"idProduct"
echo "${device}"    >"bcdDevice"
# Configure the strings the device presents itself as
mkdir "strings/0x409"
echo "${mfg}"       >"strings/0x409/manufacturer"
echo "${prod}"      >"strings/0x409/product"
echo "${serial}"    >"strings/0x409/serialnumber"

# FUNCTIONS #

# ETHERNET ECM/CDC (config 1)
mkdir "configs/c.1"
echo "${attr}"  >"configs/c.1/bmAttributes"
echo "${pwr}"   >"configs/c.1/MaxPower"
mkdir "configs/c.1/strings/0x409"
echo "${cfg1}"  >"configs/c.1/strings/0x409/configuration"
# create the function
mkdir "functions/ecm.usb0"
echo "${dev_mac1}"  > "functions/ecm.usb0/dev_addr"
echo "${host_mac1}" > "functions/ecm.usb0/host_addr"

# ETHERNET RNDIS (config 2)
mkdir "configs/c.2"
echo "${attr}"  >"configs/c.2/bmAttributes"
echo "${pwr}"   >"configs/c.2/MaxPower"
mkdir "configs/c.2/strings/0x409"
echo "${cfg2}"  >"configs/c.2/strings/0x409/configuration"
# "The OS_Desc config must specify a valid OS Descriptor for correct driver selection"
#   See: https://www.kernel.org/doc/Documentation/ABI/testing/configfs-usb-gadget
# On Windows 7 and later, the RNDIS 5.1 driver would be used by default,
# but it does not work very well. The RNDIS 6.0 driver works better. In
# order to get this driver to load automatically, we have to use a
# Microsoft-specific extension of USB.
echo "1" > "os_desc/use"
echo "${ms_vendor_code}"    >"os_desc/b_vendor_code"
echo "${ms_qw_sign}"        >"os_desc/qw_sign"
# create the function (including the Microsoft-specific bits)
mkdir "functions/rndis.usb0"
echo "${dev_mac2}"          >"functions/rndis.usb0/dev_addr"
echo "${host_mac2}"         >"functions/rndis.usb0/host_addr"
echo "${ms_compat_id}"      >"functions/rndis.usb0/os_desc/interface.rndis/compatible_id"
echo "${ms_subcompat_id}"   >"functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id"

# HID
mkdir "functions/hid.usb0"
echo "${hid_protocol}" >"functions/hid.usb0/protocol"
echo "${hid_subclass}" >"functions/hid.usb0/subclass"
echo "${hid_report_len}" >"functions/hid.usb0/report_length"
printf "\\x05\\x01\\x09\\x06\\xa1\\x01\\x05\\x07\\x19\\xe0\\x29\\xe7\\x15\\x00\\x25\\x01\\x75\\x01\\x95\\x08\\x81\\x02\\x95\\x01\\x75\\x08\\x81\\x03\\x95\\x05\\x75\\x01\\x05\\x08\\x19\\x01\\x29\\x05\\x91\\x02\\x95\\x01\\x75\\x03\\x91\\x03\\x95\\x06\\x75\\x08\\x15\\x00\\x25\\x65\\x05\\x07\\x19\\x00\\x29\\x65\\x81\\x00\\xc0" >"functions/hid.usb0/report_desc"

# LINK EVERYTHING UP AND BIND THE USB DEVICE #
ln -s "functions/ecm.usb0" "configs/c.1"
ln -s "functions/rndis.usb0" "configs/c.2"
ln -s "functions/hid.usb0" "configs/c.1/"
ln -s "configs/c.2" "os_desc"

ls "/sys/class/udc" >"UDC"

# access point device
iw dev wlan0 interface add uap0 type __ap
ip link set dev uap0 up
## forwarding
iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -i uap0 -o wlan0 -j ACCEPT

# heartbeat led
printf "heartbeat" >/sys/class/leds/led0/trigger

echo "Finished."
